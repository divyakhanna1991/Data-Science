#----------------------1.Question---------------------
import matplotlib.pyplot as plt
data = []
for i in range(5):
    value = float(input("Enter 5 value {}: ".format(i+1)))
    data.append(value)

plt.figure(figsize=(10, 10))
plt.pie(data, labels=None, autopct='%1.1f%%')
plt.title('Pie Chart')
plt.show()

plt.figure(figsize=(10, 10))
plt.bar(range(len(data)), data)
plt.title('Bar Chart')
plt.xlabel('Index')
plt.ylabel('Value')
plt.show()


#----------------------2.Question---------------------
import pandas as pd
import matplotlib.pyplot as plt

# a) Data Analysis with Pandas by displaying top and bottom 10 rows
sales_data = pd.read_csv("sales.csv")
print("Top 10 rows:")
print(sales_data.head(10))
print("\nBottom 10 rows:")
print(sales_data.tail(10))

# b) Calculate total sales by adding the data values mentioned in Sales attribute in the file
total_sales = sales_data['total_units'].sum()
print("\nTotal sales:", total_sales)

# c) Find the mean Sales
mean_sales = sales_data['total_units'].mean()
print("Mean sales:", mean_sales)

# d) Group the Sales by Category
categories = ['facecream', 'facewash', 'toothpaste', 'bathingsoap', 'shampoo', 'moisturizer']
sales_by_category = sales_data[categories].sum()
print("\nSales by Category:")
print(sales_by_category)

# e) Plot the Sales Product-wise
plt.figure(figsize=(10, 6))
sales_by_category.plot(kind='bar', color='skyblue')
plt.xticks(rotation=45)
plt.tight_layout()

# f) Mention xlabel, ylabel, and title to the plot
plt.xlabel('Product Category')
plt.ylabel('Total Sales')
plt.title('Total Sales by Product Category')

plt.show()

#------------------3 question---------------------

'''
Advantages of NumPy arrays over Python lists:

NumPy arrays are faster than Python lists for numerical operations, especially for large datasets.
NumPy arrays are more memory-efficient than Python lists for large datasets.
NumPy provides a wide range of functions and operations for numerical computations, making it easier to work with arrays compared to lists.
NumPy supports broadcasting, which allows for element-wise operations on arrays of different shapes.
NumPy allows for vectorized operations, which means that operations are applied to entire arrays rather than individual elements, leading to concise and efficient code.

'''

import numpy as np

# a) Insert column in the 2D array
array = np.array([[1, 2, 3],
                  [4, 5, 6]])
new_column = np.array([7, 8])
array_with_column = np.insert(array, array.shape[1], new_column, axis=1)
print("a) Array with inserted column: ")
print(array_with_column,'\n')

# b) Difference between array1[:,0] and array2[:,[0]]
array1 = np.array([[1, 2, 3],
                   [4, 5, 6]])
array2 = np.array([[7, 8, 9],
                   [10, 11, 12]])
print("b) Difference between array1[:,0] and array2[:,[0]] ")
print("array1[:,0]:", array1[:,0])
print("array2[:,[0]]:", array2[:,[0]])
print('\n')

# c) Use argmax() function to get axis of maximum element of the array
array = np.array([[1, 2, 3],
                  [4, 5, 6]])
max_index = np.argmax(array)
max_index_axis0 = np.argmax(array, axis=0)
max_index_axis1 = np.argmax(array, axis=1)
print("c) Use argmax() function")
print("Index of maximum element in the flattened array:", max_index)
print("Index of maximum element along axis 0:", max_index_axis0)
print("Index of maximum element along axis 1: ", max_index_axis1,'\n')

# d) Showcase the difference between argsort() and sort()
array = np.array([3, 1, 2])
sorted_indices = np.argsort(array)
sorted_array = np.sort(array)
print("d) Showcasing difference between argsort() and sort()")
print("Indices that would sort the array using argsort():", sorted_indices)
print("Sorted array using sort(): ", sorted_array,'\n')

# e) Difference between np.mean() and np.average() in NumPy
array = np.array([1, 2, 3, 4, 5])
mean = np.mean(array)
weighted_mean = np.average(array, weights=[1, 2, 3, 4, 5])

print("e) np.mean() and np.average() difference ")
print("Mean of the array (by np.mean()):", mean)
print("Weighted mean of the array with weights [1, 2, 3, 4, 5] (by np.average()): ", weighted_mean,'\n')

# f) Count the frequency of a given positive value appearing in the NumPy array
array = np.array([-1, 2, -3, 4, 2, 3, 1, 1])
positive_value = 1
frequency = np.count_nonzero(array == positive_value)
print("f) Counting +ve value frequency")
print("Frequency of", positive_value, ":", frequency,'\n')

# g) Inserting * between characters of all elements in a NumPy array
array = np.array(['abc', 'def', 'ghi'])
with_stars = np.array(['*'.join(item) for item in array])
print("g) Inserting * between characters of all elements")
print("Array with stars inserted between characters:")
print(with_stars,'\n')
